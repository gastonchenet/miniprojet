<searchbar>
  <form aria-label="search" class="searchbar" onsubmit={search}>
    <div>
      <button class="menu-button" type="button" onclick={toggleMenu}>
        <span>{state.type}</span>
        <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" class="caret">
          <path fill="currentColor" d="m7 15l5-5l5 5z"/>
        </svg>
      </button>
      <div class="menu">
        <button each={option in state.searchOptions} onclick={() => select(option)} class="element" type="button">
          {option}
        </button>
      </div>
    </div>
    <input
      type="text"
      class="search-field"
      placeholder="Search..."
      spellcheck="false"
      value={state.query}
      oninput={onSearchInput}
      onclick={onSearchInput}
    />
    <button type="submit" class="search-button">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
        <path fill="currentColor" d="M9.5 16q-2.725 0-4.612-1.888T3 9.5t1.888-4.612T9.5 3t4.613 1.888T16 9.5q0 1.1-.35 2.075T14.7 13.3l5.6 5.6q.275.275.275.7t-.275.7t-.7.275t-.7-.275l-5.6-5.6q-.75.6-1.725.95T9.5 16m0-2q1.875 0 3.188-1.312T14 9.5t-1.312-3.187T9.5 5T6.313 6.313T5 9.5t1.313 3.188T9.5 14"/>
      </svg>    
    </button>
    <div class="preview-results">
      <a each={result in state.preview} class="preview" href={`/${state.type}/${result.id}`} onclick={emptyPreview}>
        <img src={result.thumb || placeholder} class="illustration" alt={result.title} />
        <div class="info">
          <h4 class="title">{result.title || result.artist}</h4>
          <p class="artist" if={!!result.title}>{result.artist}</p>
        </div>
      </a>
    </div>
  </form>
  <script>
    import { router } from "@riotjs/route";
    import appEvents from "../utils/events.js";
    import { search } from "../utils/api.js";
    import placeholder from "../assets/images/placeholder.png";
    import { ItemType } from "../constants.js";

    let lastTyped = 0;

    export default {
      state: {
        type: ItemType.Release,
        searchOptions: Object.values(ItemType),
        query: "",
        preview: [],
      },
      placeholder,
      select(option) {
        this.update({ type: option });
        this.toggleMenu();
      },
      toggleMenu() {
        this.$(".menu").classList.toggle("visible");
      },
      emptyPreview() {
        this.update({ preview: [] });
        document.querySelector(".content-blur")?.classList.remove("visible");
      },
      async updatePreview(query = "") {
        const { results } = await search(query, this.state.type, 1, 10);
        if (!this.$(".search-field").value || document.activeElement !== this.$(".search-field")) return this.emptyPreview();
        if (results.length > 0) document.querySelector(".content-blur")?.classList.add("visible");
        this.update({ preview: search.util.formatResults(results) });
      },
      onSearchInput(e) {
        if (!e.target.value) return this.emptyPreview();
        lastTyped = Date.now();

        setTimeout(() => {
          if (!e.target.value) return this.emptyPreview();
          if (Date.now() - lastTyped < 500) return;
          this.updatePreview(e.target.value);
        }, 500);
      },
      search(e) {
        e.preventDefault();
        this.emptyPreview();
        this.$(".search-field").blur();

        const query = this.$(".search-field").value;
        const type = this.state.type;

        router.push(`/?q=${query}&type=${type}`);
        appEvents.trigger("search", { query, type });
      },
      onMounted() {
        const url = new URL(window.location.href);

        this.update({
          query: url.searchParams.get("q") || "",
          type: url.searchParams.get("type") || ItemType.Release,
        });

        this.blurListener = (() => this.emptyPreview()).bind(this);

        this.searchbarUpdateFunction = ((path) => {
          if (!path.startsWith("http")) {
            path = window.location.origin + path;
          }

          const url = new URL(path);
          let val = url.searchParams.get("q") || "";
          if (url.pathname !== "/") val = "";
          this.$(".search-field").value = val;
        }).bind(this);

        this.menuClickListener = ((e) => {
          if (!e.target.closest(".menu-button")) {
            this.$(".menu")?.classList.remove("visible");
          }
        }).bind(this);
        
        router.on.value(this.searchbarUpdateFunction);
        window.addEventListener("click", this.menuClickListener);
        document.querySelector(".content-blur")?.addEventListener("click", this.blurListener);
      },
      onBeforeUnmount() {
        router.off.value(this.searchbarUpdateFunction);
        window.removeEventListener("click", this.menuClickListener);
        document.querySelector(".content-blur")?.removeEventListener("click", this.blurListener);
      }
    }
  </script>
</searchbar>
