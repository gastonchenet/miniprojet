<releases class="releases">
  <div class="releases-container">
    <button each={release in props.releases} class="release" data-release-id={release.id} data-release-type={props.type || release.type}>
      <div class="illustration-container">
        <img src={release.thumb || this.placeholder} alt={release.title} class="illustration" />
        <p if={!props.type} class={`type ${release.type}`}>{release.type}</p>
      </div>
      <div class="text-info">
        <h2 class="title">{release.title}</h2>
        <p class={release.title ? "artist" : state.artistOnly ? "title artist-title" : "title"}>{release.artist}</p>
        <p class="year">{release.year}</p>
      </div>
      <div class="like-container" if={!props.hideLikeButton}>
        <like releaseId={release.id} liked={state.favorites[props.type || release.type].includes(release.id)} />
      </div>
    </button>
  </div>
  <script>
    import placeholder from "../../assets/images/placeholder.png";
    import { router } from "@riotjs/route";
    import { toggleLike, getFavorites } from "../../utils/favorites";
    import { waitUntilAuthReady } from "../../utils/firebase";

    export default {
      placeholder,
      state: {
        favorites: {
          release: [],
          master: [],
          artist: [],
        },
        artistOnly: false,
      },
      onMounted(props) {
        let lastClick = [0, null];
        
        this.update({ artistOnly: props.releases.every((r) => r.type === "artist") });

        if (!this.props.hideLikeButton) waitUntilAuthReady().then(async () => {
            const favorites = await getFavorites();

            this.update({
              favorites: {
                release: favorites.release.map((f) => f.id),
                master: favorites.master.map((f) => f.id),
                artist: favorites.artist.map((f) => f.id),
              }
            });
          });

        this.likeListener = this.$(".releases-container").addEventListener("click", (e) => {
          const a = e.target.closest(".release");
          const b = e.target.closest(".like");
          if (!a) return;

          e.preventDefault();
          e.stopPropagation();

          const releaseId = parseInt(a.getAttribute("data-release-id"));
          const releaseType = a.getAttribute("data-release-type");

          if (this.props.hideLikeButton) {
            router.push(`/${releaseType}/${releaseId}`);
          }

          if (b) {
            b.classList.toggle("liked");

            toggleLike({
              id: releaseId,
              title: a.querySelector(".title").textContent,
              thumb: a.querySelector(".illustration").src,
              artist: a.querySelector(".artist").textContent,
              year: parseInt(a.querySelector(".year").textContent),
            }, releaseType);

            return;
          }
          
          const like = a.querySelector(".like");
          const now = Date.now();

          if (lastClick[1] === releaseId && now - lastClick[0] < 250) {
            like.classList.toggle("liked");

            toggleLike({
              id: releaseId,
              title: a.querySelector(".title").textContent,
              thumb: a.querySelector(".illustration").src,
              artist: a.querySelector(".artist").textContent,
              year: parseInt(a.querySelector(".year").textContent),
            }, releaseType);

            lastClick = [0, null];
          } else {
            lastClick = [now, releaseId];
            
            setTimeout(() => {
              if (lastClick[1] !== releaseId) return;
              router.push(`/${releaseType}/${releaseId}`);
            }, 300);
          }
        });
      },
      onBeforeUnmount() {
        this.$(".releases-container").removeEventListener("click", this.likeListener);
      }
    }
  </script>
</releases>