<home>
  <div class="content" data-page-scroller>
    <div if={state.releases === null} class="loader" />
    <div if={state.releases !== null} class="page-content-container">
      <h2 class="results" if={state.fromSearch}>{state.items.toLocaleString("en-US")} results</h2>
      <releases releases={state.releases} if={state.releases !== null} type={state.type} loadNextPage={loadNextPage} />
    </div>
  </div>
  <script>
    import { router, getCurrentRoute } from "@riotjs/route";

    const options = {
      headers: {
        Authorization : "Discogs key=ObXNXjxZACXVRWGtaMlR, secret=JIPnNZpRmKadBUOfeLxwbzfTdrfKeOyG" 
      }
    };

    let currentPage = 1;

    export default {
      state: {
        items: 0,
        releases: null,
        fromSearch: false,
        query: "",
        type: "release",
      },
      async fetchReleases(page, count) {
        const currentUrl = new URL(window.location.href);
        this.state.query = currentUrl.searchParams.get("q") || "";
        this.state.type = currentUrl.searchParams.get("type") || "release";

        const url = new URL("https://api.discogs.com/database/search");
        url.searchParams.append("page", page);
        url.searchParams.append("per_page", count);
        url.searchParams.append("q", this.state.query);
        url.searchParams.append("type", this.state.type);

        const res = await fetch(url.toString(), options);
        return await res.json();
      },
      async loadNextPage(count) {
        const data = await this.fetchReleases(++currentPage, count);
        return data.results.map((result) => ({
          id: result.id,
          title: result.title.split(/\s*-\s*/)[1],
          artist: result.title.split(/\s*-\s*/)[0],
          year: result.year,
          thumb: result.thumb,
        }));
      },
      async fill(page, count) {
        const data = await this.fetchReleases(page, count);
        
        this.update({
          releases: data.results.map((result) => ({
            id: result.id,
            title: result.title.split(/\s*-\s*/)[1],
            artist: result.title.split(/\s*-\s*/)[0],
            year: result.year,
            thumb: result.thumb,
          })),
          items: data.pagination.items,
          fromSearch: !!this.state.query,
          updating: false,
        });

        console.log(data);
      },
      onMounted() {
        this.fill(1, 50);
      },
      onUpdated() {
        let url = getCurrentRoute() || window.location.href;

        if (!url.startsWith("http")) {
          url = window.location.origin + url;
        }

        const currentUrl = new URL(url);
        const currentQuery = currentUrl.searchParams.get("q") || "";
        const currentType = currentUrl.searchParams.get("type") || "release";

        if (
          currentQuery !== this.state.query ||
          currentType !== this.state.type
        ) {
          this.fill(1, 50);
        }
      }
    }
  </script>
</home>
