<home>
  <div class="content" data-page-scroller>
    <div if={state.updating} class="loader" />
    <div if={!state.updating && state.releases !== null} class="page-content-container">
      <h2 class="results" if={state.fromSearch}>{state.items.toLocaleString("en-US")} results</h2>
      <releases releases={state.releases} if={state.releases !== null} type={state.type} loadNextPage={loadNextPage} />
    </div>
  </div>
  <script>
    import { getCurrentRoute } from "@riotjs/route";
    import { ITEMS_PER_PAGE, DISCOGS_HEADERS } from "../../constants.js";
    import { search } from "../../utils/api.js";
    import appEvents from "../../utils/events.js";

    let currentPage = 1;

    export default {
      state: {
        items: 0,
        releases: null,
        fromSearch: false,
        query: "",
        type: "release",
        updating: true,
      },
      getSearchParams() {
        const url = new URL(window.location.href);
        const query = url.searchParams.get("q") || "";
        const type = url.searchParams.get("type") || "release";

        return { query, type };
      },
      async loadNextPage(count) {
        const { query, type } = this.getSearchParams();
        const data = await search(query, type, ++currentPage, count);
        return search.util.formatResults(data.results);
      },
      async fill(page, searchData = {}) {
        const { query, type } = this.getSearchParams();
        this.update({ updating: true });
        const data = await search(searchData.query ?? query, searchData.type ?? type, page);
        const releases = search.util.formatResults(data.results);

        if (Object.keys(searchData).length) {
          appEvents.trigger("searchUpdated", releases);
        }

        this.update({
          query,
          type,
          releases,
          items: data.pagination.items,
          fromSearch: !!this.state.query,
          updating: false,
        });

        console.log(data);
      },
      onMounted() {
        this.fill(1);
        appEvents.on("search", (searchData) => this.fill(1, searchData));
      },
    };
  </script>
</home>
