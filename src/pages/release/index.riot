<release>
  <section class="page-content">
    <div if={state.release === null} class="loader" />
    <div if={state.release !== null} class="release-container">
      <div>
        <illustrations images={state.release.images} title={state.release.title} />
        <div class="community">
          <div class="star-notation">
            <div class="stars">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 48 48" class="star filled" each={star in new Array(Math.floor(state.rating.average))}>
                <path fill="currentColor" stroke="currentColor" stroke-linejoin="round" stroke-width="4" d="m23.999 5l-6.113 12.478L4 19.49l10.059 9.834L11.654 43L24 36.42L36.345 43L33.96 29.325L44 19.491l-13.809-2.013z"/>
              </svg>
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 48 48" class="star unfilled" each={star in new Array(5 - Math.floor(state.rating.average))}>
                <path fill="currentColor" stroke="currentColor" stroke-linejoin="round" stroke-width="4" d="m23.999 5l-6.113 12.478L4 19.49l10.059 9.834L11.654 43L24 36.42L36.345 43L33.96 29.325L44 19.491l-13.809-2.013z"/>
              </svg>
            </div>
            <p class="notation">{state.rating.average}</p>
            <p class="vote-count">({state.rating.count.toLocaleString("en-US")} votes)</p>
          </div>
          <div class="like-container" if={state.loggedIn}>
            <like releaseId={state.release.id} liked={state.isFavorite} />
          </div>
        </div>
      </div>
      <div class="info">
        <h2 class="title">{state.release.title}<span if={state.release.year}>{" "}({state.release.year})</span></h2>
        <div class="artist-data">
          <h3 class="artist">
            <a class="artist-href" href={`/artist/${state.release.artists[0].id}`}>{state.release.artists[0].name}</a>
          </h3>
          <p class="country">{state.release.country}</p>
        </div>
        <div class="music-details">
          <p each={genre in state.release.genres} class="genre">{genre}</p>
          <p each={style in state.release.styles} class="style">{style}</p>
        </div>
        <div class="note-container">
          <pre class={state.noteExpanded ? "note" : "note hidden"} if={!!state.release.notes}></pre>
          <button class="expand-note" if={!!state.release.notes && state.release.notes.split("\n").length > 6} onclick={toggleExpandNotes}>{state.noteExpanded ? "hide" : "show"} note</button>
        </div>
        <div class="tracklist-container">
          <h4 class="tracklist-title">Tracklist ({state.release.tracklist.length})</h4>
          <ul class="tracklist">
            <li each={track in state.release.tracklist} class="track">
              <p class="track-text-data">
                <span class="position" if={track.type_ !== "heading"}>{track.position}</span>
                <span if={track.type_ === "heading"} class="heading">Heading</span>
                <span class="name">{track.title}</span>
                <span if={!!track.duration} class="duration">{track.duration}</span>
              </p>
              <div class="extra-artists">
                <p each={artist in track.extraartists}>
                  <span>{artist.role}</span>{" - "}
                  <a href={`/artist/${artist.id}`}>{artist.name}</a>
                </p>
              </div>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </section>
  <script>
    import { toggleLike, isFavorite } from "../../utils/favorites.js";
    import { waitUntilAuthReady, auth } from "../../utils/firebase.js";
    import { fetchRelease } from "../../utils/api.js";
    import appEvents from "../../utils/events.js";

    export default {
      state: {
        release: null,
        rating: null,
        noteExpanded: false,
        isFavorite: false,
        loggedIn: false,
      },
      toggleExpandNotes() {
        this.update({ noteExpanded: !this.state.noteExpanded });
      },
      async onMounted(props) {
        this.state.loggedIn = await waitUntilAuthReady();

        const { release, stats, fav } = await fetchRelease(props.params.id);

        console.log(release);
        console.log(stats);
        console.log(fav);

        this.update({
          release,
          rating: stats.rating,
          selectedImage: release.images[0].uri,
          isFavorite: fav,
        });

        if (release.notes) {
          const note = release.notes
            .replace(/\[url=([^\]]*)\]([^[]*)\[\/url\]/g, (_, url, text) => {
              if (url.startsWith("http")) return text;
              return `<a href='${url}' class='link'>${text}</a>`;
            })
            .replace(
              /\[r=([^\]]*)\]/g,
              "<a href='/release/$1' class='link'>here</a>"
            )
            .replace(/\[[^\]]*\]/g, "")
            .trim();

          this.$("pre.note").innerHTML = note[0].toUpperCase() + note.slice(1);
        }

        const like = this.$(".like");

        if (like) {
          this.likeListener = like.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            like.classList.toggle("liked");

            toggleLike(
              {
                id: release.id,
                title: release.title,
                thumb: release.thumb,
                artist: release.artists[0].name,
                year: release.year,
              },
              "release"
            );
          });
        }
      },
      onBeforeUnmount() {
        if (this.likeListener) this.$(".like").removeEventListener("click", this.likeListener);
      },
    };
  </script>
</release>
