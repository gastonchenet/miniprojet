<release>
  <section class="page-content">
    <div if={state.release === null} class="loader" />
    <div if={state.release !== null} class="release-container">
      <illustrations images={state.release.images} title={state.release.title} />
      <div class="info">
        <h2 class="title">{state.release.title}<span if={state.release.year}>{" "}({state.release.year})</span></h2>
        <div class="artist-data">
          <h3 class="artist">
            <a class="artist-href" href={`/artist/${state.release.artists[0].id}`}>{state.release.artists[0].name}</a>
          </h3>
          <p class="country">{state.release.country}</p>
        </div>
        <div class="music-details">
          <p each={genre in state.release.genres} class="genre">{genre}</p>
          <p each={style in state.release.styles} class="style">{style}</p>
        </div>
        <div class="note-container">
          <pre class={state.noteExpanded ? "note" : "note hidden"} if={!!state.release.notes}></pre>
          <button class="expand-note" if={!!state.release.notes && state.release.notes.split("\n").length > 7} onclick={toggleExpandNotes}>{state.noteExpanded ? "hide" : "show"} note</button>
        </div>
        <ul class="tracklist">
          <li each={track in state.release.tracklist} class="track">
            <p class="track-text-data">
              <span class="position" if={track.type_ !== "heading"}>{track.position}</span>
              <span if={track.type_ === "heading"} class="heading">Heading</span>
              <span class="name">{track.title}</span>
              <span if={!!track.duration} class="duration">{track.duration}</span>
            </p>
            <div class="extra-artists">
              <p each={artist in track.extraartists}>
                <span>{artist.role}</span>{" - "}
                <a href={`/artist/${artist.id}`}>{artist.name}</a>
              </p>
            </div>
          </li>
        </ul>
      </div>
    </div>
  </section>
  <script>
    export default {
      state: {
        release: null,
        noteExpanded: false,
      },
      toggleExpandNotes() {
        this.update({ noteExpanded: !this.state.noteExpanded });
      },
      async onMounted(props) {
        const res = await fetch(`https://api.discogs.com/releases/${props.params.id}`, {
          headers: {
            Authorization: "Discogs key=ObXNXjxZACXVRWGtaMlR, secret=JIPnNZpRmKadBUOfeLxwbzfTdrfKeOyG",
          }
        });

        const data = await res.json();
        console.log(data);
        this.update({ release: data, selectedImage: data.images[0].uri });

        if (data.notes) {
          const note = data.notes
          .replace(/\[url=([^\]]*)\]([^[]*)\[\/url\]/g, (match, url, text) => {
            if (url.startsWith("http")) return text;
            return `<a href='${url}' class='link'>${text}</a>`;
          })
          .replace(/\[r=([^\]]*)\]/g, "<a href='/release/$1' class='link'>here</a>")
          .replace(/\[[^\]]*\]/g, "")
          .trim();

          this.$("pre.note").innerHTML = note[0].toUpperCase() + note.slice(1);
        }
      }
    }
  </script>
</release>