<artist>
  <section class="page-content" data-page-scroller>
    <div if={state.artist === null} class="loader" />
    <div if={state.artist !== null} class="release-container">
      <div>
        <illustrations images={state.artist.images} title={state.artist.name} if={(state.artist.images ?? []).length > 0} />
        <div class="community">
          <div class="like-container" if={state.loggedIn}>
            <like releaseId={state.artist.id} liked={state.isFavorite} />
          </div>
        </div>
      </div>
      <div class="info">
        <h2 class="title">{state.artist.name}</h2>
        <p class="members" if={!!state.artist.members?.length}>
          <a class="member" each={member in state.artist.members.filter((m) => m.active)} href={`/artist/${member.resource_url.split("/").at(-1)}`}>{member.name.replace(/\([^)]*\)/g, "").trim()}</a>
          <a class="member inactive" if={state.seeInactives} each={member in state.artist.members.filter((m) => !m.active)} href={`/artist/${member.resource_url.split("/").at(-1)}`}>{member.name.replace(/\([^)]*\)/g, "").trim()}</a>
          <button class="see-options" if={state.artist.members.filter((m) => !m.active).length > 0} onclick={toggleSeeInactives}>{state.seeInactives ? "hide" : `see inactive members (${state.artist.members.filter((m) => !m.active).length})`}</button>
        </p>
        <p class="variations" if={(state.artist.namevariations ?? []).length > 0}>
          <span class="variation" each={variation in state.artist.namevariations.slice(0, 5)} if={state.slicedVariations}>{variation}</span>
          <button class="see-options" if={state.slicedVariations && state.artist.namevariations.length > 5} onclick={toggleSlicedVariations}>{" "}(+{state.artist.namevariations.length - 5})</button>
          <span class="variation" each={variation in state.artist.namevariations} if={!state.slicedVariations}>{variation}</span>
          <button class="see-options" if={!state.slicedVariations && state.artist.namevariations.length > 5} onclick={toggleSlicedVariations}>hide</button>
        </p>
        <p class="real-name" if={!!state.artist.realname}>{state.artist.realname}</p>
        <div class="note-container">
          <pre class={state.noteExpanded ? "note" : "note hidden"} if={!!state.artist.profile}></pre>
          <button class="expand-note" if={!!state.artist.profile && state.artist.profile.split("\n").length > 6} onclick={toggleExpandNotes}>{state.noteExpanded ? "hide" : "show"} note</button>
        </div>
        <ul class="urls" if={(state.artist.urls ?? []).length > 0}>
          <li class="title-url" each={url in state.artist.urls.filter((url) => url.includes("https://"))}>
            <a href={url} target="_tab" class="url">
              <img src={"https://www.google.com/s2/favicons?domain=" + url.match(/https?:\/\/([^/]*)/)[1]} />
              <span>{url}</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
    <div class="content artist" if={state.releases !== null}>
      <h2 class="title">Releases <span class="results">({state.pagination.items.toLocaleString("en-US")})</span></h2>
      <releases releases={state.releases} loadNextPage={loadNextPage} />
    </div>
  </section>
  <script>
    import { waitUntilAuthReady, auth } from "../../utils/firebase.js";
    import { isFavorite, toggleLike } from "../../utils/favorites.js";
    import { fetchArtist, fetchArtistReleases } from "../../utils/api.js";
    import formatProfile from "./formatProfile.js";

    let currentPage = 1;

    export default {
      state: {
        artist: null,
        releases: null,
        pagination: null,
        slicedVariations: true,
        seeInactives: false,
        noteExpanded: false,
        isFavorite: false,
        loggedIn: false,
      },
      toggleExpandNotes() {
        this.update({ noteExpanded: !this.state.noteExpanded });
      },
      toggleSeeInactives() {
        this.update({ seeInactives: !this.state.seeInactives });
      },
      toggleSlicedVariations() {
        this.update({ slicedVariations: !this.state.slicedVariations });
      },
      async loadNextPage(count) {
        const { releases } = await fetchArtistReleases(this.props.params.id, ++currentPage, count);
        return releases;
      },
      async fill(artistId) {
        const { artist, releases, pagination, fav } = await fetchArtist(artistId);
        this.update({ artist, releases, pagination, isFavorite: fav });

        console.log(artist);
        console.log(releases);
        console.log(pagination);

        if (artist.profile) {
          this.$("pre.note").innerHTML = formatProfile(artist.profile);
        }

        const like = this.$(".like");

        this.likeListener = like?.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          like.classList.toggle("liked");

          toggleLike(
            {
              id: artist.id,
              thumb: artist.images?.[0].uri,
              artist: artist.name,
            },
            "artist"
          );
        });
      },
      async onMounted(props) {
        this.state.loggedIn = await waitUntilAuthReady();
        this.fill(props.params.id);
      },
      onBeforeUnmount() {
        this.$(".like").removeEventListener("click", this.likeListener);
      },
      onUpdated(props) {
        if (this.state.artist && this.props.params.id !== props.params.id) {
          this.fill(props.params.id);
        }
      }
    };
  </script>
</artist>
