<artist>
  <section class="page-content">
    <div if={state.artist === null} class="loader" />
    <div if={state.artist !== null} class="release-container">
      <illustrations images={state.artist.images} title={state.artist.name} />
      <div class="info">
        <h2 class="title">{state.artist.name}</h2>
        <p class="members" if={!!state.artist.members?.length}>
          <a class="member" each={member in state.artist.members.filter((m) => m.active)} href={`/artist/${member.resource_url.split("/").at(-1)}`}>{member.name.replace(/\([^)]*\)/g, "").trim()}</a>
          <a class="member inactive" if={state.seeInactives} each={member in state.artist.members.filter((m) => !m.active)} href={`/artist/${member.resource_url.split("/").at(-1)}`}>{member.name.replace(/\([^)]*\)/g, "").trim()}</a>
          <button class="see-options" if={state.artist.members.filter((m) => !m.active).length > 0} onclick={toggleSeeInactives}>{state.seeInactives ? "hide" : `see inactive members (${state.artist.members.filter((m) => !m.active).length})`}</button>
        </p>
        <p class="variations">
          <span class="variation" each={variation in state.artist.namevariations.slice(0, 5)} if={state.slicedVariations}>{variation}</span>
          <button class="see-options" if={state.slicedVariations && state.artist.namevariations.length > 5} onclick={toggleSlicedVariations}>{" "}(+{state.artist.namevariations.length - 5})</button>
          <span class="variation" each={variation in state.artist.namevariations} if={!state.slicedVariations}>{variation}</span>
          <button class="see-options" if={!state.slicedVariations && state.artist.namevariations.length > 5} onclick={toggleSlicedVariations}>hide</button>
        </p>
        <p class="real-name" if={!!state.artist.realname}>{state.artist.realname}</p>
        <div class="note-container">
          <pre class={state.noteExpanded ? "note" : "note hidden"} if={!!state.artist.profile}></pre>
          <button class="expand-note" if={!!state.artist.profile && state.artist.profile.split("\n").length > 6} onclick={toggleExpandNotes}>{state.noteExpanded ? "hide" : "show"} note</button>
        </div>
        <ul class="urls">
          <li class="title-url" each={url in state.artist.urls.filter((url) => url.includes("https://"))}>
            <a href={url} target="_tab" class="url">
              <img src={"https://www.google.com/s2/favicons?domain=" + url.match(/https?:\/\/([^/]*)/)[1]} />
              <span>{url}</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
    <section class="content artist" if={state.releases !== null}>
      <h2 class="title">Releases <span class="results">({state.pagination.items.toLocaleString("en-US")})</span></h2>
      <releases releases={state.releases} type="release" />
    </section>
  </section>
  <script>
    export default {
      state: {
        artist: null,
        releases: null,
        pagination: null,
        slicedVariations: true,
        seeInactives: false,
        noteExpanded: false,
      },
      toggleExpandNotes() {
        this.update({ noteExpanded: !this.state.noteExpanded });
      },
      toggleSeeInactives() {
        this.update({ seeInactives: !this.state.seeInactives });
      },
      toggleSlicedVariations() {
        this.update({ slicedVariations: !this.state.slicedVariations });
      },
      async onMounted(props) {
        const fetchOptions = {
          headers: {
            Authorization: "Discogs key=ObXNXjxZACXVRWGtaMlR, secret=JIPnNZpRmKadBUOfeLxwbzfTdrfKeOyG",
          },
        };
        
        const responses = await Promise.all([
          fetch(`https://api.discogs.com/artists/${props.params.id}`, fetchOptions),
          fetch(`https://api.discogs.com/artists/${props.params.id}/releases`, fetchOptions),
        ]);

        const [artist, { releases, pagination }] = await Promise.all(responses.map((response) => response.json()));
        this.update({ artist, releases, pagination });
        console.log(artist);
        console.log(releases);
        console.log(pagination);

        if (artist.profile) {
          const note = artist.profile
          .replace(/\[url=([^\]]*)\]([^[]*)\[\/url\]/g, (match, url, text) => {
            if (url.startsWith("http")) return text;
            return `<a href='${url}' class='link'>${text}</a>`;
          })
          .replace(/\[r=([^\]]*)\]/g, "<a href='/release/$1' class='link'>here</a>")
          .replace(/\[[^\]]*\]/g, "")
          .trim();

          this.$("pre.note").innerHTML = note[0].toUpperCase() + note.slice(1);
        }
      },
    }
  </script>
</artist>